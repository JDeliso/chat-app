[{"/home/john/projects/chat-app/src/index.js":"1","/home/john/projects/chat-app/src/App.js":"2","/home/john/projects/chat-app/src/reportWebVitals.js":"3","/home/john/projects/chat-app/src/Dashboard.js":"4","/home/john/projects/chat-app/src/Store.js":"5"},{"size":500,"mtime":1607519875174,"results":"6","hashOfConfig":"7"},{"size":277,"mtime":1607524097550,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1607519875178,"results":"9","hashOfConfig":"7"},{"size":3682,"mtime":1607526822390,"results":"10","hashOfConfig":"7"},{"size":1134,"mtime":1607530522548,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"u5nm44",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/john/projects/chat-app/src/index.js",[],["25","26"],"/home/john/projects/chat-app/src/App.js",["27"],"import logo from './logo.svg';\nimport './App.css';\n\nimport Dashboard from \"./Dashboard.js\"\nimport Store from \"./Store.js\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Store>\n\n        <Dashboard />\n        \n      </Store>\n    </div>\n  );\n}\n\nexport default App;\n","/home/john/projects/chat-app/src/reportWebVitals.js",[],"/home/john/projects/chat-app/src/Dashboard.js",["28"],"import React from \"react\"\nimport { makeStyles, ThemeProvider } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Chip from '@material-ui/core/Chip';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\n\nimport {CTX} from './Store'\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        margin: '50px',\n        padding: theme.spacing(3,2),\n    },\n\n    flex: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n\n    topicsWindow: {\n        width: '30%',\n        height: '70vh',\n        borderRight: '1px solid grey',\n    },\n\n    chatWindow: {\n        width: '70%',\n        height: '70vh',\n        padding: '20px',\n    }, \n\n    chatBox: {\n        width: '85%',\n    },\n\n    button: {\n        width: '15%'\n    }, \n  }));\n\nexport default function Dashboard() {\n\n    const classes = useStyles();\n\n    // CTX Store\n    const {allChats, sendChatAction} = React.useContext(CTX); \n    const topics = Object.keys(allChats);\n\n    const [activeTopic, changeActiveTopic] = React.useState(topics[0]);\n    const [textValue, changeTextValue] = React.useState('');\n\n    return (\n        <div>\n            <Paper className={classes.root}>\n                <Typography variant=\"h4\" component=\"h4\">\n                    Chat App\n                </Typography>\n                <Typography variant=\"h5\" component=\"h5\">\n                    {activeTopic}\n                </Typography>\n\n                <div className={classes.flex}>\n                    <div className={classes.topicsWindow}>\n\n                        <List>\n\n                            {\n                                topics.map(topic => (\n\n                                    <ListItem onClick={e => changeActiveTopic(e.target.innerText)} key={topic} button>\n                                        <ListItemText primary={topic} />\n                                    </ListItem>\n\n                                ))\n                            }\n\n                        </List>\n\n                    </div>\n\n                    <div className={classes.chatWindow}>\n\n                        {\n                            allChats[activeTopic].map((chat, i) => (\n\n                                <div className={classes.flex} key={i}>\n                                    <Chip label={chat.from} className={classes.chip} />\n                                    <Typography varient='body1'>{chat.msg}</Typography>\n                                </div>\n\n                            ))\n                        }\n\n                    </div>\n                </div>\n\n                <div className={classes.flex}>\n\n                    <TextField\n                        label=\"Send a chat\"\n                        className={classes.chatBox}\n                        value={textValue}\n                        onChange={e => changeTextValue(e.target.value)}\n                    />\n\n                    <div className={classes.button}>\n\n                        <Button variant=\"contained\" \n                        color=\"primary\" \n                        className={classes.button}\n                        onClick={() => {\n                            sendChatAction(textValue);\n                            changeTextValue('');\n                        }}\n                        >\n                            Send\n                        </Button>\n\n                    </div>\n                </div>\n\n            </Paper>\n        </div>\n    )\n}","/home/john/projects/chat-app/src/Store.js",[],{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":1,"column":8,"nodeType":"35","messageId":"36","endLine":1,"endColumn":12},{"ruleId":"33","severity":1,"message":"37","line":2,"column":22,"nodeType":"35","messageId":"36","endLine":2,"endColumn":35},"no-native-reassign",["38"],"no-negated-in-lhs",["39"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'ThemeProvider' is defined but never used.","no-global-assign","no-unsafe-negation"]